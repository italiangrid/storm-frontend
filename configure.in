# $Id$
#*********************************************************************
#*
#* Authors: Flavia Donno <Flavia.Donno@cern.ch>
#*
#* Copyright 2004 INFN FIRB Project
#*           http://grid-it.cnaf.infn.it/
#*
#*
#* Date: 01 March 2005
#*
#*********************************************************************

dnl =============================================================
dnl Process this file with autoconf to produce a configure script
dnl =============================================================
AC_INIT(srmv2/Makefile.am)

dnl ==================
dnl Set config options
dnl ==================
AC_CONFIG_AUX_DIR(config)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(storm,1.3)
AC_PREFIX_DEFAULT(/opt/srmv2storm)
if test "x${prefix}" = "xNONE"; then
  prefix=$ac_default_prefix
  ac_configure_args="$ac_configure_args --prefix $prefix"
fi
if test "X${prefix}" = "X/opt/lcg" && ! test -e /opt/lcg ; then
   mkdir -p /opt/lcg
fi

if test -z $STORMPATCHLVL 
then
	STORMPATCHLVL=15
else
	STORMPATCHLVL=$STORMPATCHLVL
fi

dnl ===================
dnl Checks for programs
dnl ===================
AC_PROG_CXX

dnl =========================
dnl Checks for use of libtool
dnl =========================
AM_PROG_LIBTOOL

dnl ===========================================
dnl Checks for libraries.
dnl Replace `main' with a function in -lpthread
dnl ===========================================
AC_CHECK_LIB(pthread,main)

dnl =======================
dnl Checks for header files
dnl =======================
dnl AC_HEADER_DIRENT
dnl AC_HEADER_STDC

dnl =============================================================
dnl Checks for typedefs, structures, and compiler characteristics
dnl =============================================================
AC_C_CONST
AC_TYPE_SIZE_T

dnl ============================
dnl Checks for library functions
dnl AC_FUNC_UTIME_NULL
dnl ============================
AC_CHECK_FUNCS(getenv)


dnl ========================================================================
dnl Get GSOAP installation directory from command line option or environment
dnl variable GSOAP_DIR.
dnl ========================================================================
AC_MSG_CHECKING([for gsoap directory])
AC_ARG_WITH(gsoap-dir,[ | --with-gsoap-dir=<dir> Default is \$GSOAP_DIR],
            gsoap_dir="$withval", gsoap_dir="$GSOAP_DIR")
if test -d "$gsoap_dir" ; then
   AC_MSG_RESULT([$gsoap_dir found])
   GSOAP_DIR="$gsoap_dir"
else
   AC_MSG_RESULT([no such directory $gsoap_dir])
fi

dnl ===================
dnl Do you want GLOBUS?
dnl ===================
AC_ARG_ENABLE(globus,[ --enable-globus=<option> Default is yes],
            enable_globus="$enableval", enable_globus="yes")
if test "$enable_globus" = "yes" ; 
then

	dnl ===========================================================
	dnl Get Globus location from command line option or environment
	dnl variable GLOBUS_LOCATION.
	dnl ===========================================================
	AC_MSG_CHECKING([for globus location])
	AC_ARG_WITH(globus-location,[  --with-globus-location=<dir> Default is \$GLOBUS_LOCATION],
	            globus_location="$withval", globus_location="$GLOBUS_LOCATION")
	if test -d "$globus_location" ; then
	    AC_MSG_RESULT([found $globus_location])
	    GLOBUS_LOCATION_PATH=$globus_location
	else
	    AC_MSG_ERROR([no such directory $globus_location])
	fi

	dnl ===================================================
	dnl Determine globus flavor from command line option.
	dnl If command line option is not given, look in
	dnl $GLOBUS_LOCATION/include for a directory with "thr"
	dnl in the name.
	dnl ===================================================
	echo "Attempting to determine globus flavor..."
	AC_ARG_WITH(globus-flavor,[  --with-globus-flavor=flavor Default is gcc32dbgpthr
	],
	    globus_flavor=$withval, globus_flavor="gcc32dbgpthr")

	echo "globus flavor is \"$globus_flavor\""
	GLOBUS_FLAVOR=$globus_flavor

	dnl =======================================================
	dnl Check that we can create globus_makefile_header.mk from
	dnl $GLOBUS_LOCATION/sbin/globus-makefile-header
	dnl Stop if error encountered.
	dnl =======================================================
	AC_MSG_CHECKING([for existence of globus_makefile_header])
	if test ! -r "globus_makefile_header" ; then
	AC_MSG_RESULT([no])
	AC_MSG_CHECKING([that we can create globus_makefile_header for globus-flavor])
	$GLOBUS_LOCATION/bin/globus-makefile-header -flavor $GLOBUS_FLAVOR globus_gss_assist globus_gssapi_gsi> globus_makefile_header
	if test "x$?" = "x0" ; then
	    AC_MSG_RESULT([yes])
	else
	    AC_MSG_ERROR([globus-makefile-header -flavor $GLOBUS_FLAVOR produced an error])
	fi
	else
	    AC_MSG_RESULT([yes])
	fi

	GLOBUS_INCLUDES=`grep ^GLOBUS_INCLUDES globus_makefile_header | cut -d= -f2`
	GLOBUS_LDFLAGS=`grep ^GLOBUS_LDFLAGS globus_makefile_header | cut -d= -f2`
	GLOBUS_PKG_LIBS=`grep ^GLOBUS_PKG_LIBS globus_makefile_header | cut -d= -f2`

    SSL_AND_CRYPTO=" -lssl_$GLOBUS_FLAVOR -lcrypto_$GLOBUS_FLAVOR "

	dnl ==================================================================
	dnl Get GSI Plugins option
	dnl ==================================================================
	AC_MSG_CHECKING([for gsoap-gsi option])
	AC_ARG_ENABLE(gsoapgsi,[ --enable-gsoapgsi=<option> Default is yes],
	            gsoapgsiopt="$enableval", gsoapgsiopt="yes")
	if test "x$gsoapgsiopt" = "xyes" || test "x$gsoapgsiopt" = "xno"; then
	   AC_MSG_RESULT([$gsoapgsiopt])
	fi
	if test "x$gsoapgsiopt" = "xyes"; then
	   GSOAPGSI_CFLAGS="-DGSI_PLUGINS"
	else
	   GSOAPGSI_CFLAGS=""
	fi

	dnl ==================================================================
	dnl Get GSI Plugins installation directory from command line option or
	dnl environment variable GSOAPGSI_DIR.
	dnl ==================================================================
	AC_MSG_CHECKING([for gsoap-gsi directory])
	AC_ARG_WITH(gsoapgsi-dir,[ | --with-gsoapgsi-dir=<dir> Default is \$GSOAPGSI_DIR],
	            gsoapgsi_dir="$withval", gsoapgsi_dir="$GSOAPGSI_DIR")
	if test -d "$gsoapgsi_dir"; then
	   AC_MSG_RESULT([$gsoapgsi_dir found])
	   GSOAPGSI_DIR="$gsoapgsi_dir"
	   GSOAPGSI_CFLAGS="-DGSI_PLUGINS"
	   GSOAPGSI_LDFLAGS="-L${GSOAPGSI_DIR}/lib"
	   GSOAPGSI_LDADD="-lcgsi_plugin_voms_gsoap_2.6_$GLOBUS_FLAVOR"
	else
	   AC_MSG_RESULT([no such directory $gsoap_dir])
	fi

else
    SSL_AND_CRYPTO=" -lssl -lcrypto "
fi

dnl ==================================================================
dnl Get XMLRPC-C installation directory from command line option or
dnl environment variable XMLRPC-C_DIR.
dnl ==================================================================
XMLRPC_C_LDADD="$(xmlrpc-c-config --ldadd) $(xmlrpc-c-config client --ldadd)"
XMLRPC_C_CFLAGS="$(xmlrpc-c-config --cflags)"
AC_MSG_CHECKING([for xmlrpc-c directory])
AC_ARG_WITH(xmlrpc-c-dir,[ | --with-xmlrpc-c-dir=<dir> Default is \$XMLRPC_C_DIR],
            xmlrpc_c_dir="$withval", xmlrpc_c_dir="$XMLRPC_C_DIR")
if test -d "$xmlrpc_c_dir" ; then
   AC_MSG_RESULT([$xmlrpc_c_dir found])
   XMLRPC_C_DIR="$xmlrpc_c_dir"
   XMLRPC_C_LDADD="`$XMLRPC_C_DIR/bin/xmlrpc-c-config --ldadd` `$XMLRPC_C_DIR/bin/xmlrpc-c-config client --ldadd`"
   XMLRPC_C_CFLAGS="`$XMLRPC_C_DIR/bin/xmlrpc-c-config --cflags`"
else
   AC_MSG_RESULT([no such directory $xmlrpc_c_dir])
fi

dnl ========================================================================
dnl Get MySQL installation directory from command line option or environment
dnl variable MYSQL_DIR.
dnl ========================================================================
AC_MSG_CHECKING([for MySQL directory])
AC_ARG_WITH(mysql-dir,[  --with-mysql-dir=<dir> Default is \$MYSQL_DIR],
            mysql_dir="$withval", mysql_dir="$MYSQL_DIR")
if test -d "$mysql_dir" ; then
   AC_MSG_RESULT([$mysql_dir found])
   MYSQL_DIR="$mysql_dir"
   MYSQL_CFLAGS="-I${MYSQL_DIR}/include/mysql -DUSE_MYSQL"
   MYSQL_LDFLAGS="-L${MYSQL_DIR}/lib/mysql"
   MYSQL_LDADD="-lmysqlclient_r"
else
   AC_MSG_RESULT([no such directory $mysql_dir])
fi

dnl
dnl Check if all sub-packages need to be built.
dnl 
AC_MSG_CHECKING([for building all])
AC_ARG_ENABLE(all,[  --enable-all=<option> Default is yes],
            allopt="$enableval", allopt="yes")
if test "x$allopt" = "xyes" || test "x$allopt" = "xno"; then
    AC_MSG_RESULT([$allopt])
fi

#dnl
#dnl Check if only FE SRM server needs to be built.
#dnl 
#AC_MSG_CHECKING([for building FE SRM server only])
#AC_ARG_ENABLE(fe-server,[  --enable-fe-server=<option> Default is no],
#            feservopt="$enableval", feservopt="no")
#if test "x$feservopt" = "xyes" || test "x$feservopt" = "xno"; then
#    AC_MSG_RESULT([$feservopt])
#fi
#
#dnl
#dnl Check if only FE SRM client test programs need to be built.
#dnl
#AC_MSG_CHECKING([for building FE SRM client only])
#AC_ARG_ENABLE(fe-client,[  --enable-fe-client=<option> Default is no],
#            fecltopt="$enableval", fecltopt="no")
#if test "x$fecltopt" = "xyes" || test "x$fecltopt" = "xno"; then
#    AC_MSG_RESULT([$fecltopt])
#fi
#
#AM_CONDITIONAL(FESERV_SELECTED, \
#        test "x$allopt" = "xyes" \
#        -o "x$feservopt" = "xyes")
#
#AM_CONDITIONAL(FECLT_SELECTED, \
#        test "x$allopt" = "xyes" \
#        -o "x$fecltopt" = "xyes")

dnl =============
dnl Check RPM dir
dnl =============
RPMD=`pwd`
AC_MSG_CHECKING([for directory where to create rpms])
AC_ARG_WITH(rpm-dir,[  --with-rpm-dir=<dir> Default is \$RPMD/],
            rpm_dir="$withval", rpm_dir="$RPMD")
if test -d "$rpm_dir" ; then
    AC_MSG_RESULT([found $rpm_dir])
    RPM_DIR=$rpm_dir
else
    AC_MSG_RESULT([no such directory $rpm_dir])
    AC_MSG_RESULT([the directory $rpm_dir will be created for you if possible])
    RPM_DIR=$rpm_dir
fi

PREFIX=$prefix

dnl =========================
dnl Define required variables
dnl =========================
AC_SUBST(STORMPATCHLVL)
AC_SUBST(RPM_DIR)
AC_SUBST(GLOBUS_LOCATION)
AC_SUBST(GLOBUS_FLAVOR)
AC_SUBST(GLOBUS_INCLUDES)
AC_SUBST(GLOBUS_LDFLAGS)
AC_SUBST(GLOBUS_PKG_LIBS)
AC_SUBST(SSL_AND_CRYPTO)
AC_SUBST(MYSQL_DIR)
AC_SUBST(MYSQL_CFLAGS)
AC_SUBST(MYSQL_LDFLAGS)
AC_SUBST(MYSQL_LDADD)
AC_SUBST(GSOAP_DIR)
AC_SUBST(GSOAPGSI_DIR)
AC_SUBST(GSOAPGSI_CFLAGS)
AC_SUBST(GSOAPGSI_LDFLAGS)
AC_SUBST(GSOAPGSI_LDADD)
AC_SUBST(XMLRPC_C_DIR)
AC_SUBST(XMLRPC_C_LDADD)
AC_SUBST(XMLRPC_C_CFLAGS)
AC_SUBST(PREFIX)

AC_OUTPUT(Makefile \
          srmv2/Makefile \
          srmv2/srmv2_init_script \
          srmv2/srm_server.h \
          db/Makefile \
          srmv2-storm-server.spec \
          clean.sh)

