%define name         @PACKAGE@
%define version      @VERSION@
%define release      @STORM_FRONTEND_AGE_NUMBER@.@STORM_FRONTEND_SO@

%define builddir     @RPM_BUILD_DIR@/build-%{name}-%{version}

%define vomsdir      @VOMS_INSTALL_PATH@
%define vomsincludedir @VOMS_INCLUDE_PATH@

%define boostdir     @BOOST_INSTALL_PATH@
%define boostdevdir  @BOOST_DEVEL_INSTALL_PATH@
%define boostincludedir @BOOST_INCLUDE_PATH@

%define gsoapdir       @GSOAP_LOCATION@
%define gsoapwsdl2hdir @GSOAP_WSDL2H_LOCATION@
%define cgsigsoapdir   @CGSI_GSOAP_LOCATION@

%define mysqldir @MYSQL_INSTALL_PATH@
%define mysqldevdir @MYSQL_DEVEL_INSTALL_PATH@

%define xmlrpccdir    @XMLRPC_C_LOCATION@
%define xmlrpccdevdir @XMLRPC_C_DEVEL_LOCATION@

%define curldir    @CURL_LOCATION@
%define curldevdir @CURL_DEVEL_LOCATION@

%define stormfrontenddir @STORM_FRONTEND_LOCATION@

%define prefixname @PACKAGE_PREFIX_NAME@
%define shortname  @PACKAGE_SHORT_NAME@
%define longname   @PACKAGE_LONG_NAME@

%define default_user root

Name:           %{name}
Version:        %{version}
Release:        %{release}.dbg
Vendor:         EMI
Packager:       Elisabetta Ronchieri <elisabetta.ronchieri@cnaf.infn.it> 
License:        Apache License
URL:            http://storm.forge.cnaf.infn.it
Source:         @PACKAGE@-%{version}.tar.gz
Group:          Applications/System
AutoReqProv:    yes
BuildRoot:      %{_builddir}/var/tmp/%{name}-%{version}
Summary:        The StoRM FrontEnd component 

BuildRequires: automake
BuildRequires: autoconf
BuildRequires: libtool
BuildRequires: curl-devel
BuildRequires: mysql-devel
BuildRequires: globus-gssapi-gsi-devel
BuildRequires: globus-gss-assist-devel
BuildRequires: globus-common-devel
BuildRequires: globus-gridmap-callout-error-devel
BuildRequires: globus-gsi-credential-devel
BuildRequires: globus-gssapi-gsi-devel
BuildRequires: globus-gss-assist-devel
BuildRequires: krb5-devel
BuildRequires: gsoap-devel
BuildRequires: CGSI-gSOAP-devel
BuildRequires: voms
BuildRequires: boost141-devel
BuildRequires: mysql-devel
BuildRequires: xmlrpc-c-devel

Requires(post):   chkconfig
Requires(preun):  chkconfig
Requires(preun):  initscripts
Requires(postun): initscripts 

Requires: curl
Requires: globus-gssapi-gsi
Requires: mysql
Requires: xmlrpc-c
Requires: voms
Requires: CGSI-gSOAP
Requires: boost141-program-options
Requires: boost141-thread
Requires: gsoap

%description
This is the installation bundle for the StoRM FrontEnd server.

StoRM provides an SRM interface to any POSIX filesystem with direct file 
access ("file:" transport protocol), but can take advantage of special 
features of high performance parallel and cluster file systems, as 
GPFS from IBM and Lustre from SUN.

%prep
%setup -n @PACKAGE@-%{version}

%build
./bootstrap emi.storm.common
./configure --prefix=/usr --sbindir=/usr/sbin --datadir=/usr/share --enable-debug=yes --localstatedir=/var --sysconfdir=/etc --with-boost-prefix=%{boostdir} --with-boost-devel-prefix=%{boostdevdir} --with-boost-include=%{boostincludedir} --enable-boost-mt --with-curl-prefix=%{curldir} --with-curl-devel-prefix=%{curldevdir} --with-xmlrpc-c-prefix=%{xmlrpccdir} --with-xmlrpc-c-devel-prefix=%{xmlrpccdevdir} --with-cgsi-gsoap-location=%{cgsigsoapdir} --with-mysql-prefix=%{mysqldir} --with-mysql-devel-prefix=%{mysqldevdir} --with-voms-prefix=%{vomsdir} --with-voms-include=%{vomsincludedir} --with-gsoap-location=%{gsoapdir} --with-gsoap-wsdl2h-location=%{gsoapwsdl2hdir} --with-gsoap-version=2.7.13 --with-gsoap-wsdl2h-version=1.2.13 --with-storm-frontend-location=%{stormfrontenddir} --enable-gsoapgsi
make

%pre
TMP_FOLDER=%{_sysconfdir}/%{prefixname}/tmp/storm_permissions_mantainance
rm -rf ${TMP_FOLDER}

if [ -d %{_sysconfdir}/%{prefixname} ] ; then
  STORM_CONF_OWNNER_USER=`stat -c %U %{_sysconfdir}/%{prefixname}`
  STORM_CONF_OWNNER_GROUP=`stat -c %G %{_sysconfdir}/%{prefixname}`
  if [ ! "x${STORM_CONF_OWNNER_USER}" = "x%{default_user}" ] ; then
    echo "preserving %{_sysconfdir}/%{prefixname} folder owner ownership"
    umask 077 && mkdir -p ${TMP_FOLDER}
    echo "export STORM_CONF_OWNNER_USER=${STORM_CONF_OWNNER_USER}" >> ${TMP_FOLDER}/export_vars
    echo "unset STORM_CONF_OWNNER_USER" >> ${TMP_FOLDER}/unset_vars
  fi
  if [ ! "x${STORM_CONF_OWNNER_GROUP}" = "x%{default_user}" ] ; then
    echo "preserving %{_sysconfdir}/%{prefixname} folder group ownership"
    echo "export STORM_CONF_OWNNER_GROUP=${STORM_CONF_OWNNER_GROUP}" >> ${TMP_FOLDER}/export_vars
    echo "unset STORM_CONF_OWNNER_GROUP" >> ${TMP_FOLDER}/unset_vars
  fi
fi
if [ -d %{_localstatedir}/log/%{prefixname} ] ; then
  STORM_LOG_OWNNER_USER=`stat -c %U %{_localstatedir}/log/%{prefixname}`
  STORM_LOG_OWNNER_GROUP=`stat -c %G %{_localstatedir}/log/%{prefixname}`
  if [ ! "x${STORM_LOG_OWNNER_USER}" = "x%{default_user}" ] ; then
    echo "preserving %{_localstatedir}/log/%{prefixname} folder owner ownership"
    umask 077 && mkdir -p ${TMP_FOLDER}
    echo "export STORM_LOG_OWNNER_USER=${STORM_LOG_OWNNER_USER}" >> ${TMP_FOLDER}/export_vars
    echo "unset STORM_LOG_OWNNER_USER" >> ${TMP_FOLDER}/unset_vars
  fi
  if [ ! "x${STORM_LOG_OWNNER_GROUP}" = "x%{default_user}" ] ; then
    echo "preserving %{_localstatedir}/log/%{prefixname} folder group ownership"
    echo "export STORM_LOG_OWNNER_GROUP=${STORM_LOG_OWNNER_GROUP}" >> ${TMP_FOLDER}/export_vars
    echo "unset STORM_LOG_OWNNER_GROUP" >> ${TMP_FOLDER}/unset_vars
  fi
fi


%install
if [ -d $RPM_BUILD_ROOT ]; then rm -rf $RPM_BUILD_ROOT; fi
mkdir -p $RPM_BUILD_ROOT
make install DESTDIR=$RPM_BUILD_ROOT
mkdir -p $RPM_BUILD_ROOT/%{_localstatedir}/log/%{prefixname}

%post
#during an install, the value of the argument passed in is 1
#during an unupgrade, the value of the argument passed in is 2
if [ "$1" = "1" ] ; then
  echo 'add service to chkconfig'
  /sbin/chkconfig --add %{longname}
fi;
if [ "$1" = "2" ] ; then
  echo "The StoRM FrontEnd server has been upgraded but NOT configured yet.
You need to use yaim to configure the server.
"
  echo 'stop service'
  /sbin/service %{longname} stop >/dev/null 2>&1 || :
fi;

TMP_FOLDER=%{_sysconfdir}/%{prefixname}/tmp/storm_permissions_mantainance

if [ -d %{_sysconfdir}/%{prefixname} ] ; then
  if [ -d ${TMP_FOLDER} ] ; then
    echo "restoring %{_sysconfdir}/%{prefixname} and %{_localstatedir}/log/%{prefixname} folder ownership"
    if [ -f ${TMP_FOLDER}/export_vars -a -f ${TMP_FOLDER}/unset_vars ] ; then
      source ${TMP_FOLDER}/export_vars
      DONE="false"
      if [ ! -z ${STORM_CONF_OWNNER_USER} ] ; then
        echo "Setting %{_sysconfdir}/%{prefixname} user ownership to ${STORM_CONF_OWNNER_USER}"
        chown ${STORM_CONF_OWNNER_USER} %{_sysconfdir}/%{prefixname}
        DONE="true"
      fi
      if [ ! -z ${STORM_CONF_OWNNER_GROUP} ] ; then
        echo "Setting %{_sysconfdir}/%{prefixname} group ownership to ${STORM_CONF_OWNNER_GROUP}"
        chgrp ${STORM_CONF_OWNNER_GROUP} %{_sysconfdir}/%{prefixname}
        DONE="true"
      fi
      if [ ! -z ${STORM_LOG_OWNNER_USER} ] ; then
        echo "Setting %{_localstatedir}/log/%{prefixname} user ownership to ${STORM_LOG_OWNNER_USER}"
        chown ${STORM_LOG_OWNNER_USER} %{_localstatedir}/log/%{prefixname}
        DONE="true"
      fi
      if [ ! -z ${STORM_LOG_OWNNER_GROUP} ] ; then
        echo "Setting %{_localstatedir}/log/%{prefixname} group ownership to ${STORM_LOG_OWNNER_GROUP}"
        chgrp ${STORM_LOG_OWNNER_GROUP} %{_localstatedir}/log/%{prefixname}
        DONE="true"
      fi
      if [ ! "x$DONE" = "xtrue" ] ; then
        echo "Error. No STORM_CONF_OWNNER_GROUP or STORM_CONF_OWNNER_USER variable available"
        exit 1
      fi
      source ${TMP_FOLDER}/unset_vars
      DONE=""
    else
      echo "Error. No env variable files available in /tmp/storm_permissions_mantainance"
      exit 1
    fi
    rm -rf ${TMP_FOLDER}
  fi
fi


%preun
#during an upgrade, the value of the argument passed in is 1
#during an uninstall, the value of the argument passed in is 0
if [ "$1" = "0" ] ; then
  echo 'stop service'
  /sbin/service %{longname} stop >/dev/null 2>&1 || :
  echo 'del service from chkconfig'
  /sbin/chkconfig --del %{longname}
fi;
if [ "$1" = "1" ] ; then
  echo "The StoRM FrontEnd server has been upgraded but NOT configured yet.
You need to use yaim to configure the server.
"
  echo 'stop service'
  /sbin/service %{longname} stop >/dev/null 2>&1 || :
fi;

%postun
#during an upgrade, the value of the argument passed in is 1
#during an uninstall, the value of the argument passed in is 0
if [ "$1" = "1" ] ; then
  echo "The StoRM FrontEnd server has been upgraded but NOT configured yet.
You need to use yaim to configure the server.
"
  echo 'stop service'
  /sbin/service %{longname} stop >/dev/null 2>&1 || :
fi;
if [ "$1" = "0" ] ; then
  echo 'remove old file'
  rm -f /etc/init.d/%{longname}.*
  rm -f /etc/cron.d/%{longname}.cron.*
fi

%files
%defattr(-,%{default_user},%{default_user},-)
%{_sbindir}/%{longname}
%{_sysconfdir}/init.d/%{longname}
%{_sysconfdir}/sysconfig/%{longname}
%config(noreplace) %attr(644,%{default_user},%{default_user}) %{_sysconfdir}/logrotate.d/%{longname}

%dir %{_sysconfdir}/%{prefixname}/%{shortname}
%config(noreplace) %attr(640,%{default_user},%{default_user}) %{_sysconfdir}/%{prefixname}/%{shortname}/%{longname}.conf.template

%doc %dir %{_datadir}/doc/%{name}-%{version}
%doc %{_datadir}/doc/%{name}-%{version}/ChangeLog
%doc %{_datadir}/doc/%{name}-%{version}/CREDITS
%doc %{_datadir}/doc/%{name}-%{version}/LICENSE
%doc %{_datadir}/doc/%{name}-%{version}/README

%doc %dir %{_datadir}/wsdl
%doc %{_datadir}/wsdl/srm.v2.2.wsdl

%dir %{_localstatedir}/log/%{prefixname}

%clean
rm -rf $RPM_BUILD_ROOT

%changelog
* Mon May 02 2011 Elisabetta Roncheiri <elisabetta.ronchieri@cnaf.infn.it> - 1.7.0-5.sl5
- Added BuildRequires in spec file
- Added src in the src tar file
- Cleaned configuration file
- Fix bug of apostrophe in dn

* Mon Apr 04 2011 Elisabetta Ronchieri> <elisabetta.ronchieri@cnaf.infn.it> - 1.7.0-2.sl5
- Renamed package

* Fri Feb 24 2011 Elisabetta Ronchieri> <elisabetta.ronchieri@cnaf.infn.it> - 1.7.0-1.sl5
- Added Fedora guidelines
