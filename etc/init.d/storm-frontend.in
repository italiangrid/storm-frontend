#!/bin/sh
#
# srmv2         Start/Stop srmv2
#
# chkconfig: 345 94 16
# description: SRMV2 STORM server daemon
#
# $Id: srmv2_init_script.in 3016 2006-11-22 14:15:23Z aforti $
#
#

#
## PLEASE USE sysconfig FILE TO CHANGE THESE ENVIRONMENT VARIABLES
#
export GRIDMAPDIR=/etc/grid-security/gridmapdir
export GRIDMAP=/etc/grid-security/grid-mapfile
export CSEC_MECH=ID
STORM_LOGDIR=@PREFIX@/var/log
STORM_LOGFILE=srmv2storm.log
STORM_NSCONFIG=/etc/sysconfig/srmv2storm.nsconfig
STORM_CONFIG=/etc/sysconfig/srmv2storm
STORM_PROXY_DIR=/opt/storm/var/proxies
OPTIONS="-vvv"
STORM_FE_USER="storm"
sysname=`uname -s`

# source function library
if [ -r /etc/rc.d/init.d/functions ]; then
    . /etc/rc.d/init.d/functions
    DAEMON=daemon
    FAILURE=failure
    ECHO_FAILURE=failure
    SUCCESS=success
    ECHO_SUCCESS=echo_success
    ECHO_END=echo
    if [ $sysname = "Linux" ]; then
        ECHOOPT=-n
    fi
else
    DAEMON=
    FAILURE=
    ECHO_FAILURE=
    SUCCESS=
    ECHO_SUCCESS=
    ECHOOPT=
    ECHO_END=
fi

if [ -r $STORM_CONFIG ]; then
    source $STORM_CONFIG
    if [ -n "$STORM_FE_USER" ]; then
        OPTIONS="$OPTIONS -U $STORM_FE_USER"
    fi
fi

if [ -z "$STORM_PROXY_DIR" ]; then
    STORM_PROXY_DIR=@PREFIX@/var/proxies
fi

RETVAL=0
prog="srmv2storm"
PIDFILE=/var/run/srmv2storm.pid
PIDDIR=/var/run
SUBSYS=/var/lock/subsys/srmv2storm
SUBSYSDIR=/var/lock/subsys
[ -z "$SILENTSTOP" ] && SILENTSTOP=0
SRMV2DAEMON=@PREFIX@/sbin/$prog
SRMV2SHUTDOWN=@PREFIX@/bin/$prog-shutdown
#SYSCONFIGSRMV2DAEMON=/etc/sysconfig/srmv2

#
## Blindly attempt to create useful directories
#
[ ! -d $PIDDIR ] && mkdir -p $PIDDIR >& /dev/null
[ ! -d $SUBSYSDIR ] && mkdir -p $SUBSYSDIR >& /dev/null

if [ $sysname = "HP-UX" ]; then
    export UNIX95=1
fi
if [ $sysname = "SunOS" ]; then
    format4comm="fname"
else
    format4comm="comm"
fi

case "$1" in
  start)
    if [ "$STORM_FE_USER" != "root" ]
    then
        STOP=0
        if [ ! -d /etc/grid-security/$STORM_FE_USER/ ]; then
            echo "Error: directory /etc/grid-security/$STORM_FE_USER/ does not exists"
            STOP=1
        fi
        if [ ! -e /etc/grid-security/$STORM_FE_USER/hostcert.pem ]; then
            echo "Error: /etc/grid-security/$STORM_FE_USER/hostcert.pem does not exists"
            STOP=1
        fi
        if [ ! -e /etc/grid-security/$STORM_FE_USER/hostkey.pem ]; then
            echo "Error: /etc/grid-security/$STORM_FE_USER/hostkey.pem does not exists"
            STOP=1
        fi
        if [ $STOP -eq 1 ]; then
            exit 1
        fi
        export X509_USER_CERT=/etc/grid-security/$STORM_FE_USER/hostcert.pem
        export X509_USER_KEY=/etc/grid-security/$STORM_FE_USER/hostkey.pem
    fi

    echo $ECHOOPT "Starting $prog: "
    if [ $sysname = "Linux" -a `whoami` = "root" ]; then
        netstat -ap | egrep '\*:8444|\*:srmv2' | grep LISTEN | grep srmv2 > /dev/null
    else
        netstat -a  | egrep '\*:8444|\*:srmv2' | egrep 'LISTEN *$' > /dev/null
    fi
    # ps -eo ppid,$format4comm | egrep '^[ \t]+1 srmv2' > /dev/null
    if [ $? -eq 0 ]; then
        echo $ECHOOPT "srmv2 already started: "
        [ -n "$FAILURE" ] && $FAILURE "srmv2 already started: "
        RETVAL=1
    else
#        if [ -r $SYSCONFIGSRMV2DAEMON ]; then
            #
            ## Source the configuration
            #
#            . $SYSCONFIGSRMV2DAEMON
#            if [ "${RUN_SRMV2DAEMON}" != "yes" ]; then
#                echo $ECHOOPT "$SYSCONFIGSRMV2DAEMON says NO: "
#                [ -n "$FAILURE" ] && $FAILURE "$SYSCONFIGSRMV2DAEMON says NO: "
#                RETVAL=1
#            fi
#            if [ -n "${ULIMIT_N}" ]; then
#                ulimit -n ${ULIMIT_N}
#            fi
#        fi
#        if [ $RETVAL -eq 0 ]; then
            cd /
            if [ ! -d $STORM_PROXY_DIR ]; then
                mkdir -p $STORM_PROXY_DIR
            fi
            [ -n "$STORM_FE_USER" ] && chown "$STORM_FE_USER" $STORM_PROXY_DIR

            if [ ! -d $STORM_LOGDIR ]; then
                mkdir -p $STORM_LOGDIR
            fi
            [ -n "$STORM_FE_USER" ] && chown "$STORM_FE_USER" $STORM_LOGDIR
            STORM_LOG="$STORM_LOGDIR/$STORM_LOGFILE"

            $DAEMON "su -s /bin/bash $STORM_FE_USER -c \"$SRMV2DAEMON $OPTIONS -c $STORM_NSCONFIG -P $STORM_PROXY_DIR  -l $STORM_LOG\""
            if [ $? -eq 0 ]; then
                [ -d $SUBSYSDIR ] && touch $SUBSYS
                if [ -d $PIDDIR ]; then
                    pid=`ps -eo pid,ppid,$format4comm | grep " 1 srmv2storm$" | awk '{print $1}'`
                    # The point of $PIDFILE is that it kills only
                    # the master daemon.
                    rm -f $PIDFILE
                    echo $pid > $PIDFILE
                fi
                RETVAL=0
            else
                echo $ECHOOPT "srmv2storm not started: "
                [ -n "$FAILURE" ] && $FAILURE "srmv2storm not started: "
                RETVAL=1
            fi
#        fi
    fi
    $ECHO_END
    ;;
  stop)
    if [ -f $PIDFILE ]; then
        [ $SILENTSTOP -eq 0 ] && echo $ECHOOPT "Stopping $prog: "
        if [ -x $SRMV2SHUTDOWN ]; then
            if [ $SILENTSTOP -eq 0 ]; then
                $SRMV2SHUTDOWN -f -h `hostname`
            else
                $SRMV2SHUTDOWN -f -h `hostname` >& /dev/null
            fi
            RETVAL=$?
            if [ $RETVAL -ne 0 ]; then
                if [ $SILENTSTOP -eq 0 ]; then
                    kill -2 -`cat $PIDFILE`
                else
                    kill -2 -`cat $PIDFILE` >& /dev/null
                fi
                RETVAL=$?
            fi
        else
            if [ $SILENTSTOP -eq 0 ]; then
                kill -2 -`cat $PIDFILE`
            else
                kill -2 -`cat $PIDFILE` >& /dev/null
            fi
            RETVAL=$?
        fi
        if [ $RETVAL -eq 0 ]; then
            rm -f $PIDFILE
        fi
    else
        # srmv2storm might have been started by hand
        pid=`ps -eo pid,ppid,$format4comm | grep " 1 srmv2storm$" | awk '{print $1}'`
        if [ -n "$pid" ]; then
            [ $SILENTSTOP -eq 0 ] && echo $ECHOOPT "Stopping $prog: "
            if [ -x $SRMV2SHUTDOWN ]; then
                if [ $SILENTSTOP -eq 0 ]; then
                    $SRMV2SHUTDOWN -f -h `hostname`
                else
                    $SRMV2SHUTDOWN -f -h `hostname` >& /dev/null
                fi
                RETVAL=$?
                if [ $RETVAL -ne 0 ]; then
                    if [ $SILENTSTOP -eq 0 ]; then
                        kill -2 -$pid
                    else
                        kill -2 -$pid >& /dev/null
                    fi
                    RETVAL=$?
                fi
            else
                if [ $SILENTSTOP -eq 0 ]; then
                    kill -2 -$pid
                else
                    kill -2 -$pid >& /dev/null
                fi
                RETVAL=$?
            fi
        else
            [ $SILENTSTOP -eq 0 ] && echo $ECHOOPT "srmv2storm already stopped: "
            [ $SILENTSTOP -eq 0 -a -n "$FAILURE" ] && $FAILURE "srmv2storm already stopped: "
            RETVAL=1
        fi
    fi
    if [ $SILENTSTOP -eq 0 -a $sysname = "Linux" ]; then
        if [ $RETVAL -eq 0 ]; then
            $ECHO_SUCCESS
        else
            $ECHO_FAILURE
        fi
    fi
    [ -d $SUBSYSDIR ] && rm -f $SUBSYS
    [ $SILENTSTOP -eq 0 -a -n "$ECHO_END" ] && $ECHO_END
    ;;
  restart)
    $0 stop
    sleep 5
    if [ $? -eq 0 ]; then
        $0 start
        RETVAL=$?
    else
        #
        ## It is legal to return zero it if was
        ## a conditional restart
        #
        if [ $SILENTSTOP -eq 0 ]; then
            RETVAL=1
        else
            RETVAL=0
        fi
    fi
    ;;
  condrestart)
    SILENTSTOP=1
    export SILENTSTOP
    $0 restart
    RETVAL=$?
    ;;
  status)
    pid=`ps -eo pid,ppid,$format4comm | grep " 1 srmv2storm$" | awk '{print $1}'`
    if [ -n "$pid" ]; then
        echo $ECHOOPT "srmv2storm (pid $pid) is running..."
        $ECHO_SUCCESS
        $ECHO_END
    else
        if [ -f $PIDFILE ]; then
            pid=`head -1 $PIDFILE`
            if [ "$pid" != "" ] ; then
                echo $ECHOOPT "srmv2storm dead but pid file exists"
                $ECHO_FAILURE
                $ECHO_END
            fi
        else
            if [ -f $SUBSYS ]; then
                echo $ECHOOPT "srmv2storm dead but subsys ($SUBSYS) locked"
            else
                echo $ECHOOPT "srmv2storm is stopped"
            fi
            $ECHO_FAILURE
            $ECHO_END
        fi
    fi
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart|condrestart}"
    RETVAL=1
    ;;
esac

exit $RETVAL

